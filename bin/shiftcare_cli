require_relative '../lib/shiftcare_cli/fetch_client_data'
require_relative '../lib/shiftcare_cli/client'

module ShiftCareCLI
  class CLI
    CLIENTS_API_URL = 'https://appassets02.shiftcare.com/manual/clients.json'

    def self.run(args)
      command = args.first

      case command
      when 'search'
        run_search(args[1..].join(' '))
      when 'duplicate_email'
        run_duplicate_email_check
      when nil
        clients = fetch_clients
        puts "Total clients loaded: #{clients.size}"
      else
        puts "Unknown command: '#{command}'"
        puts "Available commands: search, duplicate_email"
      end
    end

    def self.fetch_clients
      puts "Fetching client data..."
      json_data = ShiftCareCLI::FetchClientData.fetch(CLIENTS_API_URL)
      json_data.map { |client_data| ShiftCareCLI::Client.new(client_data) }
    rescue => e
      puts "Failed to fetch clients: #{e.message}"
      exit(1)
    end

    def self.run_search(query)
      if query.strip.empty?
        puts "Please provide a search query."
        return
      end

      clients = fetch_clients
      results = ShiftCareCLI::Client.search_by_name(clients, query)

      if results.empty?
        puts "No clients found for '#{query}'."
      else
        puts "Found #{results.size} client(s):"
        results.each { |client| puts "#{client.full_name} (#{client.email})" }
      end
    end

    def self.run_duplicate_email_check
      clients = fetch_clients
      duplicates = ShiftCareCLI::Client.find_duplicates(clients)

      if duplicates.empty?
        puts "No duplicate emails found."
      else
        puts "Duplicate emails found:"
        duplicates.each do |email, dup_clients|
          puts "#{email}:"
          dup_clients.each { |client| puts "#{client.full_name} (ID: #{client.id})" }
        end
      end
    end
  end
end

ShiftCareCLI::CLI.run(ARGV)
